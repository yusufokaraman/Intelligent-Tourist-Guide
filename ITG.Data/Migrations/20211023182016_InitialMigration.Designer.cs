// <auto-generated />
using System;
using ITG.Data.Concrete.EntityFramework.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ITG.Data.Migrations
{
    [DbContext(typeof(ITGContext))]
    [Migration("20211023182016_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ITG.Entities.Concrete.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CommentCount")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<string>("SeoAuthor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SeoDescription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SeoTags")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("PlaceId");

                    b.HasIndex("UserId");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CityId = 1,
                            CommentCount = 1,
                            Content = "Lorem Ipsum, dizgi ve baskı endüstrisinde kullanılan mıgır metinlerdir. Lorem Ipsum, adı bilinmeyen bir matbaacının bir hurufat numune kitabı oluşturmak üzere bir yazı galerisini alarak karıştırdığı 1500'lerden beri endüstri standardı sahte metinler olarak kullanılmıştır. Beşyüz yıl boyunca varlığını sürdürmekle kalmamış, aynı zamanda pek değişmeden elektronik dizgiye de sıçramıştır. 1960'larda Lorem Ipsum pasajları da içeren Letraset yapraklarının yayınlanması ile ve yakın zamanda Aldus PageMaker gibi Lorem Ipsum sürümleri içeren masaüstü yayıncılık yazılımları ile popüler olmuştur.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2021, 10, 23, 21, 20, 16, 436, DateTimeKind.Local).AddTicks(557),
                            Date = new DateTime(2021, 10, 23, 21, 20, 16, 435, DateTimeKind.Local).AddTicks(9723),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2021, 10, 23, 21, 20, 16, 436, DateTimeKind.Local).AddTicks(993),
                            Note = "Adana Yemek Kültürü Tanıtımı",
                            PlaceId = 1,
                            SeoAuthor = "Yusuf Karaman",
                            SeoDescription = "Adana Yemek Kültürü",
                            SeoTags = "Adana, Kebap, Yemek",
                            Thumbnail = "Default.jpg",
                            Title = "Adana Yemek Kültürü",
                            UserId = 1,
                            ViewCount = 100
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CityId = 2,
                            CommentCount = 1,
                            Content = "Lorem Ipsum pasajlarının birçok çeşitlemesi vardır. Ancak bunların büyük bir çoğunluğu mizah katılarak veya rastgele sözcükler eklenerek değiştirilmişlerdir. Eğer bir Lorem Ipsum pasajı kullanacaksanız, metin aralarına utandırıcı sözcükler gizlenmediğinden emin olmanız gerekir. İnternet'teki tüm Lorem Ipsum üreteçleri önceden belirlenmiş metin bloklarını yineler. Bu da, bu üreteci İnternet üzerindeki gerçek Lorem Ipsum üreteci yapar. Bu üreteç, 200'den fazla Latince sözcük ve onlara ait cümle yapılarını içeren bir sözlük kullanır. Bu nedenle, üretilen Lorem Ipsum metinleri yinelemelerden, mizahtan ve karakteristik olmayan sözcüklerden uzaktır.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2021, 10, 23, 21, 20, 16, 436, DateTimeKind.Local).AddTicks(1965),
                            Date = new DateTime(2021, 10, 23, 21, 20, 16, 436, DateTimeKind.Local).AddTicks(1963),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2021, 10, 23, 21, 20, 16, 436, DateTimeKind.Local).AddTicks(1966),
                            Note = "Adıyaman Yemek Kültürü Tanıtımı",
                            PlaceId = 2,
                            SeoAuthor = "Yusuf Karaman",
                            SeoDescription = "Adıyaman Yemek Kültürü",
                            SeoTags = "Adıyaman, Kebap, Yemek",
                            Thumbnail = "Default.jpg",
                            Title = "Adıyaman Yemek Kültürü",
                            UserId = 1,
                            ViewCount = 100
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            CityId = 1,
                            CommentCount = 1,
                            Content = "Lorem Ipsum pasajlarının birçok çeşitlemesi vardır. Ancak bunların büyük bir çoğunluğu mizah katılarak veya rastgele sözcükler eklenerek değiştirilmişlerdir. Eğer bir Lorem Ipsum pasajı kullanacaksanız, metin aralarına utandırıcı sözcükler gizlenmediğinden emin olmanız gerekir. İnternet'teki tüm Lorem Ipsum üreteçleri önceden belirlenmiş metin bloklarını yineler. Bu da, bu üreteci İnternet üzerindeki gerçek Lorem Ipsum üreteci yapar. Bu üreteç, 200'den fazla Latince sözcük ve onlara ait cümle yapılarını içeren bir sözlük kullanır. Bu nedenle, üretilen Lorem Ipsum metinleri yinelemelerden, mizahtan ve karakteristik olmayan sözcüklerden uzaktır.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2021, 10, 23, 21, 20, 16, 436, DateTimeKind.Local).AddTicks(1973),
                            Date = new DateTime(2021, 10, 23, 21, 20, 16, 436, DateTimeKind.Local).AddTicks(1971),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2021, 10, 23, 21, 20, 16, 436, DateTimeKind.Local).AddTicks(1974),
                            Note = "Adana Tarihi Mekanlar Tanıtımı",
                            PlaceId = 3,
                            SeoAuthor = "Yusuf Karaman",
                            SeoDescription = "Adana Tarihi Yerler",
                            SeoTags = "Adana, Kültür,Tarih,Vanda,Kebap",
                            Thumbnail = "Default.jpg",
                            Title = "Adana Tarihi Yerler",
                            UserId = 1,
                            ViewCount = 100
                        });
                });

            modelBuilder.Entity("ITG.Entities.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2021, 10, 23, 21, 20, 16, 438, DateTimeKind.Local).AddTicks(7466),
                            Description = "Yemek yenilebilecek yerler ile ilgili oluşturulmuş kategoridir.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2021, 10, 23, 21, 20, 16, 438, DateTimeKind.Local).AddTicks(7477),
                            Name = "Yemek",
                            Note = "Yemek Turist Rehberi Kategorisi"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2021, 10, 23, 21, 20, 16, 438, DateTimeKind.Local).AddTicks(7489),
                            Description = "Müze ve tarihsel yerler için oluşturulmuş kategoridir.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2021, 10, 23, 21, 20, 16, 438, DateTimeKind.Local).AddTicks(7491),
                            Name = "Tarihi Gezi",
                            Note = "Tarihi Gezi Turist Rehberi Kategorisi"
                        },
                        new
                        {
                            Id = 3,
                            CityId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2021, 10, 23, 21, 20, 16, 438, DateTimeKind.Local).AddTicks(7494),
                            Description = "Doğal Parklar için oluşturulmuş kategoridir.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2021, 10, 23, 21, 20, 16, 438, DateTimeKind.Local).AddTicks(7495),
                            Name = "Doğa Gezisi",
                            Note = "Doğal Parklar Turist Rehberi Kategorisi"
                        });
                });

            modelBuilder.Entity("ITG.Entities.Concrete.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Adana, Türkiye'nin bir ili ve en kalabalık altıncı şehridir. 2019 yılı verilerine göre 2.258.718 nüfusa sahiptir. İlin yüz ölçümü 13.844 km²dir. İlde km²ye 160 kişi düşmektedir. 01.02.2018 TÜİK verilerine göre 5'i merkez ilçe olmak üzere toplam 15 ilçesi ve belediyesi vardır. Bu ilçelerde 831 mahalle bulunmaktadır.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2021, 10, 23, 21, 20, 16, 440, DateTimeKind.Local).AddTicks(3454),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2021, 10, 23, 21, 20, 16, 440, DateTimeKind.Local).AddTicks(3464),
                            Name = "Adana",
                            Note = "01 Plakalı il Adana.",
                            Thumbnail = "Default.jpg"
                        },
                        new
                        {
                            Id = 2,
                            Content = "Adıyaman, aynı isimli ilin merkez ilçesidir. Adıyaman merkez ilçesinin nüfusu 2020 istatistiklerine 310.644'dür. ",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2021, 10, 23, 21, 20, 16, 440, DateTimeKind.Local).AddTicks(3475),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2021, 10, 23, 21, 20, 16, 440, DateTimeKind.Local).AddTicks(3476),
                            Name = "Adıyaman",
                            Note = "02 Plakalı il Adıyaman.",
                            Thumbnail = "Default.jpg"
                        },
                        new
                        {
                            Id = 3,
                            Content = "Afyonkarahisar veya eski ve halk arasındaki ismiyle Afyon, aynı isimli ilin merkezidir. Mermercilik ve gıda sektöründe Türkiye içinde ve dışında isim yapmıştır. Şehrin Afyon olan ismi, 2005 yılında Afyonkarahisar olarak değiştirilmiştir. ",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2021, 10, 23, 21, 20, 16, 440, DateTimeKind.Local).AddTicks(3480),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2021, 10, 23, 21, 20, 16, 440, DateTimeKind.Local).AddTicks(3481),
                            Name = "Afyon",
                            Note = "03 Plakalı il Afyon.",
                            Thumbnail = "Default.jpg"
                        });
                });

            modelBuilder.Entity("ITG.Entities.Concrete.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("CityId");

                    b.HasIndex("PlaceId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleId = 1,
                            CityId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2021, 10, 23, 21, 20, 16, 442, DateTimeKind.Local).AddTicks(6128),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2021, 10, 23, 21, 20, 16, 442, DateTimeKind.Local).AddTicks(6139),
                            Note = "Adana Kebapçısı Yorumu",
                            PlaceId = 1,
                            Text = "Bu bir deneme yorumu olarak düşünülmüştür."
                        },
                        new
                        {
                            Id = 2,
                            ArticleId = 2,
                            CityId = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2021, 10, 23, 21, 20, 16, 442, DateTimeKind.Local).AddTicks(6150),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2021, 10, 23, 21, 20, 16, 442, DateTimeKind.Local).AddTicks(6151),
                            Note = "Adıyaman Ev Yemekleri Yorumu",
                            PlaceId = 2,
                            Text = "Adıyaman Ev Yemekleri üzerine deneme yorumu."
                        },
                        new
                        {
                            Id = 3,
                            ArticleId = 3,
                            CityId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2021, 10, 23, 21, 20, 16, 442, DateTimeKind.Local).AddTicks(6155),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2021, 10, 23, 21, 20, 16, 442, DateTimeKind.Local).AddTicks(6156),
                            Note = "Adana Vanda Köprüsü Yorumu Yorumu",
                            PlaceId = 3,
                            Text = "Adana Vanda Köprüsü üzerine bir deneme yorumudur."
                        });
                });

            modelBuilder.Entity("ITG.Entities.Concrete.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PlacePicture")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.ToTable("Places");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Adana Merkez,Adana Kebapçısı",
                            CategoryId = 1,
                            CityId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2021, 10, 23, 21, 20, 16, 444, DateTimeKind.Local).AddTicks(7749),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2021, 10, 23, 21, 20, 16, 444, DateTimeKind.Local).AddTicks(7759),
                            Name = "Adana Kebapçısı",
                            Note = "Adana'da yer alan kebapçı",
                            PlacePicture = "Default.jpg"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Adıyaman Ev Yemekler, Merkez-Adıyaman",
                            CategoryId = 1,
                            CityId = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2021, 10, 23, 21, 20, 16, 444, DateTimeKind.Local).AddTicks(8184),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2021, 10, 23, 21, 20, 16, 444, DateTimeKind.Local).AddTicks(8185),
                            Name = "Adıyaman Ev Yemekleri",
                            Note = "Adıyaman'da faaliyer gösteren ev yemekleri restoranı.",
                            PlacePicture = "Default.jpg"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Adana Varda Köprüsü,Merkez Adana",
                            CategoryId = 2,
                            CityId = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2021, 10, 23, 21, 20, 16, 444, DateTimeKind.Local).AddTicks(8189),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2021, 10, 23, 21, 20, 16, 444, DateTimeKind.Local).AddTicks(8191),
                            Name = "Adana Varda Köprüsü",
                            Note = "Adana'da bulunan tarihi Varda Köprüsü.",
                            PlacePicture = "Default.jpg"
                        });
                });

            modelBuilder.Entity("ITG.Entities.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2021, 10, 23, 21, 20, 16, 446, DateTimeKind.Local).AddTicks(2455),
                            Description = "The admin role has all the rights.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2021, 10, 23, 21, 20, 16, 446, DateTimeKind.Local).AddTicks(2465),
                            Name = "AdminUser",
                            Note = "This is Administrator."
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2021, 10, 23, 21, 20, 16, 446, DateTimeKind.Local).AddTicks(2475),
                            Description = "The PowerUser has certain rights.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2021, 10, 23, 21, 20, 16, 446, DateTimeKind.Local).AddTicks(2476),
                            Name = "PowerUser",
                            Note = "This is PowerUser."
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2021, 10, 23, 21, 20, 16, 446, DateTimeKind.Local).AddTicks(2480),
                            Description = "The GuestUser is the least privileged role class",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2021, 10, 23, 21, 20, 16, 446, DateTimeKind.Local).AddTicks(2481),
                            Name = "GuestUser",
                            Note = "This is GuestUser."
                        });
                });

            modelBuilder.Entity("ITG.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("VARBINARY(500)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2021, 10, 23, 21, 20, 16, 455, DateTimeKind.Local).AddTicks(5429),
                            Description = "First Admin User.",
                            Email = "yusufokaraman@gmail.com",
                            FirstName = "Yusuf",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Karaman",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2021, 10, 23, 21, 20, 16, 455, DateTimeKind.Local).AddTicks(5440),
                            Note = "Administrator",
                            PasswordHash = new byte[] { 48, 49, 57, 50, 48, 50, 51, 97, 55, 98, 98, 100, 55, 51, 50, 53, 48, 53, 49, 54, 102, 48, 54, 57, 100, 102, 49, 56, 98, 53, 48, 48 },
                            Picture = "https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSX4wVGjMQ37PaO4PdUVEAliSLi8-c2gJ1zvQ&usqp=CAU",
                            RoleId = 1,
                            Username = "yusufkaraman"
                        });
                });

            modelBuilder.Entity("ITG.Entities.Concrete.Article", b =>
                {
                    b.HasOne("ITG.Entities.Concrete.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITG.Entities.Concrete.City", "City")
                        .WithMany("Articles")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ITG.Entities.Concrete.Place", "Place")
                        .WithMany("Articles")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ITG.Entities.Concrete.User", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("City");

                    b.Navigation("Place");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ITG.Entities.Concrete.Category", b =>
                {
                    b.HasOne("ITG.Entities.Concrete.City", "City")
                        .WithMany("Categories")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("ITG.Entities.Concrete.Comment", b =>
                {
                    b.HasOne("ITG.Entities.Concrete.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITG.Entities.Concrete.City", "City")
                        .WithMany("Comments")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ITG.Entities.Concrete.Place", "Place")
                        .WithMany("Comments")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("City");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("ITG.Entities.Concrete.Place", b =>
                {
                    b.HasOne("ITG.Entities.Concrete.Category", "Category")
                        .WithMany("Places")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ITG.Entities.Concrete.City", "City")
                        .WithMany("Places")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("City");
                });

            modelBuilder.Entity("ITG.Entities.Concrete.User", b =>
                {
                    b.HasOne("ITG.Entities.Concrete.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ITG.Entities.Concrete.Article", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("ITG.Entities.Concrete.Category", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Places");
                });

            modelBuilder.Entity("ITG.Entities.Concrete.City", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Categories");

                    b.Navigation("Comments");

                    b.Navigation("Places");
                });

            modelBuilder.Entity("ITG.Entities.Concrete.Place", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("ITG.Entities.Concrete.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ITG.Entities.Concrete.User", b =>
                {
                    b.Navigation("Articles");
                });
#pragma warning restore 612, 618
        }
    }
}
